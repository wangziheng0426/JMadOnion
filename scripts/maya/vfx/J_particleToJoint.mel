/////////////////////////////////////////////////////////////
///\file J_particleToJoint.mel
///
///\brief    粒子转换脚本v2.0  
///
///\author 桔
///\version 1.0
///\date  15:23 2018/3/6
///History:  
///
///////////////////////////////////////////////////////////////
global proc J_particleToJoint()//主程序
{
/////////////////////////////////////////////////////////////生成窗体
string $checkBoxs[];
int $winWidth=300;
int $count=10;
if (`window -ex checkNodesWin`)
	deleteUI -window checkNodesWin;
	window -w 300 -h 600 -title "粒子群集工具" checkNodesWin;
		int $ButtonW=80;
		int $ButtonH=30;
		frameLayout -cll 1 -cl 0 -h ($count*20) -l "导出粒子"  myColum;
		formLayout  -numberOfDivisions 100  checkNodesLayout;
		//button -bgc 0.7 0.1 0.1 -l "改帧速率为30" -w $ButtonW  -h $ButtonH  -c  "J_changePlayBackSpeedTo30" button00;
		//separator  -w $winWidth -bgc .5 .5 .5 -st "in"  sepx ;	
		//textScrollList -h 100 instanceList;
		//button -l "添加替代模型" -w $ButtonW  -h $ButtonH -c  "J_PaaddModelsFromSelect" checkButton1;
		button -l "转换粒子替代" -w $ButtonW  -h $ButtonH -c  "J_ParticleToJointModel()" bu_conpa;
		
		separator  -w $winWidth -bgc .5 .5 .5 -st "in"  sepx1 ;	
		textField  -w 260 -h 25 pathText;
		
		button -l "选择路径" -w $ButtonW  -h $ButtonH -c  "J_PaGetPath" buPath ;
		button -l "导出群集文件" -w $ButtonW  -h $ButtonH -c  "J_P2Jrun()" buUp ;
		button -l "导出fbx文件" -w $ButtonW  -h $ButtonH -c  "J_PaSelectedToFbx" buUpS ;
		button -l "动画转骨骼" -w $ButtonW  -h $ButtonH  -c  "J_modelAnimToJointAnim" button01;
		button -l "动画转骨骼(带显示隐藏TP适用)" -w $ButtonW  -h $ButtonH  -c  "J_modelAnimToJointAnim" button02;
		button -l "布料转morph" -w $ButtonW  -h $ButtonH  -c  "J_clothToMorph(1)" button03;
		button -l "骨骼模型序列" -w $ButtonW  -h $ButtonH  -c  "J_objSequenceToEngine" button04;
	/////////////////////////////////////////////////////////编辑窗体	
	int $apx=5;
	int $apy=5;

	formLayout -e 
		-ap bu_conpa left 0 1
		-af bu_conpa top 0
		-ap bu_conpa right 0 99
		
		-af sepx1 left 0
		-ac sepx1 top $apy bu_conpa
		-af sepx1 right 0 
		
		-af pathText left $apx  
		-ac pathText top $apy sepx1
		-af pathText right $apx  
		
		-af buPath left $apx 
		-ac buPath top $apy pathText
		-ap buPath right 0 33
		
		-ac buUp left $apx buPath
		-ac buUp top $apy pathText
		-ap buUp right 0 66
		
		-ac buUpS left $apx buUp
		-ac buUpS top $apy pathText
		-ap buUpS right 0 99
		
		-ap button01 left 0 1
		-ac button01 top $apy buUpS
		-ap button01 right 0 99
		
		-ap button02 left 0 1
		-ac button02 top $apy button01
		-ap button02 right 0 99
		
		-ap button03 left 0 1
		-ac button03 top $apy button02
		-ap button03 right 0 99
		
		-ap button04 left 0 1
		-ac button04 top $apy button03
		-ap button04 right 0 99
		
		checkNodesLayout;
		
showWindow checkNodesWin;

}

global proc J_getPaticleAttr(string $particleName,string $rootJoint,string $rootTransform,string $paRotation,string $paPosition,string $paIndex,string $paScale,string $paAimDir,string $paAimPos,string $paAimAxis,string $paAimUpAxis,string $paAimWorldUp,string $instancerNode[],string $instanceObjects[])//particleNode粒子节点
{
	int $particleCount=`particle  -count -q $particleName`;
	string $curveNode;
	float $tr[];
	float $sc[];
	float $ro[];
	float $ra[];
	float $paId[];
	
	
	int $frame=`getAttr time1.outTime`;;
	for($i=0;$i<$particleCount;$i++)
	{	string $paShape[]=`listRelatives -c -s $particleName`;
		
		$paId=`particle  -at particleId -or $i  -q  $particleName`;

		J_createBone($instancerNode,$instanceObjects,$particleName,$paId[0],$rootJoint,$rootTransform);
		//位置信息
		$tr=`particle  -at $paPosition -id $paId[0]  -q  $particleName`;
			$curveNode=$particleName+"_"+$paId[0]+"_joint";
			setKeyframe -at "translateX" -v $tr[0] -t $frame $curveNode;
			setKeyframe -at "translateY" -v $tr[1] -t $frame $curveNode;
			setKeyframe -at "translateZ" -v $tr[2] -t $frame $curveNode;
			
		if($paAimDir!="")
		{
		vector $sctemp=`particle  -at $paAimDir -id $paId[0]   -q  $particleName`;	
		$sc=unit($sctemp);
		if (mag($sctemp)>0.01)
				
				{$ro=`angleBetween -er -v1  1 0 0  -v2  $sc[0] $sc[1] $sc[2] `;
				
					setKeyframe -at "rotateX" -v $ro[0] -t $frame $curveNode;			
					setKeyframe -at "rotateY" -v $ro[1] -t $frame $curveNode;
					setKeyframe -at "rotateZ" -v $ro[2] -t $frame $curveNode;
				}
				
		}
		clear $paId;clear $tr;clear $sc;clear $ro;
		
	}
}



global proc J_P2Jrun()//判断粒子节点，执行每帧添加关键帧
{
	J_ParticleToJointModel();
	J_PaUpLoadToFbx;//输出fbx
}

global proc J_ParticleToJointModel()//判断粒子节点，执行每帧添加关键帧
{
	string $sel[]=`ls -sl`;
	string $particleName=$sel[0];
	int $startFrame =`playbackOptions -q -min`;
	int $endFrame  =`playbackOptions -q -max`;
	string $rootJoint=("rootJoint_"+$sel[0]);
	string $rootTransform=("rootGrp_"+$sel[0]);
	if(!`objExists $rootJoint`)
	{createNode joint -n $rootJoint;}
	if(!`objExists $rootTransform`)
	{createNode transform -n $rootTransform;}
	string $instancerNode[]	=	`particleInstancer -q -name $particleName`;
	string $instanceObjects[]=`particleInstancer -name $instancerNode[0] -q -object $particleName`;
	
	
	string $paRotation		=	`particleInstancer -name $instancerNode[0] -q -rotation $particleName`;
	string $paPosition		=	`particleInstancer -name $instancerNode[0] -q -position $particleName`;
	string $paIndex			=	`particleInstancer -name $instancerNode[0] -q -objectIndex $particleName`;
	string $paScale			=	`particleInstancer -name $instancerNode[0] -q -scale $particleName`;
	string $paAimDir		=	`particleInstancer -name $instancerNode[0] -q -aimDirection $particleName`;
	string $paAimPos		=	`particleInstancer -name $instancerNode[0] -q -aimPosition $particleName`;
	string $paAimAxis		=	`particleInstancer -name $instancerNode[0] -q -aimAxis $particleName`;
	string $paAimUpAxis		=	`particleInstancer -name $instancerNode[0] -q -aimUpAxis $particleName`;
	string $paAimWorldUp	=	`particleInstancer -name $instancerNode[0] -q -aimWorldUp $particleName`;
	
	for ($i=$startFrame;$i<$endFrame ;$i++)
		{
				currentTime $i;
				string $paShape[]=`listRelatives -c -s $sel[0]`;
				J_getPaticleAttr($particleName,$rootJoint,$rootTransform,$paRotation,$paPosition,$paIndex,$paScale,$paAimDir,$paAimPos,$paAimAxis,$paAimUpAxis,$paAimWorldUp,$instancerNode,$instanceObjects);
				clear $paShape;
		}
}

global proc J_PaGetPath()//设置路径
{
	string $temp[];
   //if(!catch($temp=`fileDialog2 -fm 0`))
   //{
    $temp[0]=`fileDialog -m 1 `;
   //}
	textField -e -tx $temp -w 260 -h 25 pathText;
}

global proc J_PaUpLoadToFbx()//上传群集骨骼
{
	string $all[]=`ls -type joint`;
	select $all;
	string $paths=`textField -q -tx  pathText`;
	string $buffer0[];
	$numTokens0 = `tokenize $paths "." $buffer0`;
	string $buffer[];
	$numTokens = `tokenize $buffer0[0] "/" $buffer`;
	
	string $filePP=$buffer[0];
	for($i=1;$i<size($buffer);$i++)
		{
			if($i==size($buffer)-1)
			{$filePP+="/@"+$buffer[$i];}
			else
			{$filePP+="/"+$buffer[$i];}
		}
	string $fileFbxAn=$filePP+".fbx";	
		catch(loadPlugin ( "fbxmaya"));
	if(catch(`file -force -options "v=0;" -typ "FBX export" -pr -es $fileFbxAn`))
	{
	file -op "" -typ "Fbx" -pr -es $fileFbxAn;
	}	

	string $filePPM=$buffer[0];
	for($i=1;$i<size($buffer);$i++)
		{
			$filePPM+="/"+$buffer[$i];
		}
	string $fileFbxMo=$filePPM+".fbx";//模型文件名
	sysFile -copy $fileFbxMo $fileFbxAn;
}
global proc J_PaSelectedToFbx()//上传选中物体
{
	string $paths=`textField -q -tx  pathText`;
	J_outFile($paths,2);
}
global proc J_PaaddModelsFromSelect()
{
	string $sel[]=`ls -sl`;
	textScrollList -e -ra  instanceList;
	for($i in $sel)
	{
	textScrollList -e -append $i instanceList;
	}
}

