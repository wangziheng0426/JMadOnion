/////////////////////////////////////////////////////////////
///\file J_moreThanOneObj.mel
///\brief 检查重名工具
///
///\author 桔
///\version 1.0
///\date  15:44 2018/1/9
///History:  
///
///////////////////////////////////////////////////////////////

///打开主界面窗口
///\return success
global proc  string J_moreThanOneObj()
{	//列出所有的节点
	string $allNodes[] = `ls`;
	string $allName[];
	clear $allName;
	string $overName[];
	clear $overName;

	progressWindow -title "正在检查重名节点，请稍等..." -progress 0 -ii 1 -status "开始..";
	int $progress = $p = 0;
	int $num = `size $allNodes`;

	for($node in $allNodes){
	
		string $buffer[];
		$numTokens=`tokenize $node "|" $buffer`;
		if(stringArrayContains($buffer[$numTokens-1],$allName))
		  $overName[size($overName)]=$buffer[$numTokens-1];
		else
		  $allName[size($allName)]=$buffer[$numTokens-1];
		  
		++$p;
		$progress = $p * 50/$num;
		progressWindow -e -progress $progress -status ("完成:" + $progress + "%  (" +  $p + " objects checked)");
		if ( `progressWindow -query -isCancelled` ) break;
	}
	
	//print $overName;
	string $addShapesCommand = "textScrollList -edit "; 	
	
	for($node in $allNodes)
	{
		string $buffer[];
		$numTokens=`tokenize $node "|" $buffer`;
		if(stringArrayContains($buffer[$numTokens-1],$overName))
		$addShapesCommand = ($addShapesCommand + "-append \"" + $node + "\"   ");
		//print ("\n"+$node);
		++$p;
		$progress = $p * 50/$num;
		progressWindow -e -progress $progress -status ("完成:" + $progress + "%  (" +  $p + " objects checked)");
		if ( `progressWindow -query -isCancelled` ) break;
	}

	$addShapesCommand = $addShapesCommand + "overNameList;";
	progressWindow -e -endProgress;

	if  (`size $overName`)  
	{
		if (`window -ex J_moreThanOneObjWin`) deleteUI -window J_moreThanOneObjWin;		
		string $win=`window -t "重名查询工具" -rtf 1 -h 450 -w 245 J_moreThanOneObjWin`;
		scrollLayout scrollLayout;
		formLayout -numberOfDivisions 100  juForm;
			textScrollList -h 300  -sc "J_selectitemMore()" -allowMultiSelection true overNameList;
			textField -tx "NodeName" nameField;
			string $b2 = `button -l "全部重命名" -w 100 -c "J_overNameObjRenameAllCmd()"`;
		formLayout -e
		-af overNameList top 0
		-af overNameList left 0
		-ap overNameList right 0 99
		-ap overNameList bottom 0 60
		
		-ac nameField "top" 2 overNameList
		-af nameField left 0
		-af nameField right 0
		
		-ac $b2 "top" 2 nameField
		-af $b2 left 0
		-af $b2 right 0
		
		juForm;
		showWindow $win;
		eval $addShapesCommand;
	}
	else{confirmDialog -m "没有检测到重名节点" -t "Check Result" -button "Ok" -defaultButton "Ok" ;}

return "success";
}


///重命名重名节点
///\return success
global proc    string J_overNameObjRenameAllCmd()
{
	//string  $reName[] = `formLayout -q -ca juFormX`;
	string $newName = `textField -q -tx nameField`;
	J_superRaname($newName);
	if (`window -ex J_moreThanOneObjWin`) deleteUI -window J_moreThanOneObjWin;	
	J_moreThanOneObj;
	return "success";
}

///列表与场景同步选择
///\return success
global proc    string J_selectitemMore()
{
	string $nn[]=`textScrollList -q -si overNameList`;
	select $nn;
	return "success";
}


///节点层级数量排序 输入字符数组  排序后输出
///\param string $baseName 基础名称
///\return success
global proc    string J_superRaname(string $baseName)
{
string $allNodes[] = `ls`;
	string $allName[];
	clear $allName;
	string $overName[];
	clear $overName;
	string $resNames[];
	int $resCount=0;
	for($node in $allNodes)
	{
		string $buffer[];
		$numTokens=`tokenize $node "|" $buffer`;
		if(stringArrayContains($buffer[$numTokens-1],$allName))
		  $overName[size($overName)]=$buffer[$numTokens-1];
		else
		  $allName[size($allName)]=$buffer[$numTokens-1];
	}
	for($node in $allNodes)
	{
		string $buffer[];
		$numTokens=`tokenize $node "|" $buffer`;
		if(stringArrayContains($buffer[$numTokens-1],$overName))
		{$resNames[$resCount]=$node;$resCount++;  }
		
	}
	int $objNum[];
	$objNum[0]=0;
	J_quickSort($resNames);
	J_runRename($resNames,$baseName,$objNum);
	return "success";
}
///重命名操作实体
///\param string $resNames 源节点名
///\param string $baseName 基础名称
///\param string $objNum 序号
///\return success
global proc    string J_runRename(string $resNames[],string $baseName,int $objNum[])
{
	
	for($i=size($resNames);$i>0;$i--)
	{

		if(`objExists $resNames[$i]` )
		{
			string $newName=($baseName+$objNum[0]);
            while(`objExists $newName`)
                {
                $objNum[0]=$objNum[0]+1;
                $newName=($baseName+"Shape"+$objNum[0]);
                }
    	catch(`rename $resNames[$i] $newName`);
		//NWrenShap($resNames);
		}
	}
	return "success";
}


///排序准备工作,提取节点层级数
///\param string $vIn 源节点名列表
///\return success

global proc    string J_quickSort(string $vIn[])
{
	int $a[];
	int $indexIn[] ;
	for($k=0;$k<size($vIn);$k++)
	{
		string $xx=$vIn[$k];
		string $buffer[];
		$numTokens=`tokenize $xx "|" $buffer`;
		$a[$k]=(size($buffer));
	}
	int $count=size($vIn)-1;
	RunQuickSort($vIn,$a,$indexIn,0,$count);
	return "success";
}

///根据层级排序
///\param string $v 源节点数组 
///\param string $a 源节点层级数
///\param string $b 源节点层级数
///\param string $start 源节点层级数
///\param string $end 源节点层级数
///\return success
global proc    string RunQuickSort(string $v[],int $a[],int $b[] ,int $start, int $end)
        {

            int $left = $start;
            int $right = $end;
            int $key = $a[$start];
			int $keyX = $b[$start];
			string $keyV=$v[$start];
            while ($left < $right)
            {
                while ($a[$right] >= $key && $left < $right)
                {
                    $right--;
                }
                while ($a[$left] <= $key && $left < $right)
                {
                    $left++;
                }
                if ($left < $right)
                {
                    int $tempA = $a[$left];
					int $tempB = $b[$left];
					string $tempV=$v[$left];
                    $a[$left] = $a[$right];
					$b[$left] = $b[$right];
					$v[$left] = $v[$right];
                    $a[$right] = $tempA;
					$b[$right] = $tempB;
					$v[$right] = $tempV;
                }

                if ($left == $right)
                {
                    $a[$start] = $a[$left];
					$b[$start] = $b[$left];
					$v[$start] = $v[$left];
                    $a[$left] = $key;
					$b[$left] = $keyX;
					$v[$left] = $keyV;

                }
            }

            if ($start < $left - 1)
            {
                RunQuickSort($v,$a, $b,$start, $left - 1);
            }
            if($left< $end)
            {
                RunQuickSort($v,$a,$b, $left+1, $end);
            }
			return "success";
        }
